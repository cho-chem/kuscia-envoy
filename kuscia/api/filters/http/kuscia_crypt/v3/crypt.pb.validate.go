// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kuscia/api/filters/http/kuscia_crypt/v3/crypt.proto

package v3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CryptRule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CryptRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CryptRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CryptRuleMultiError, or nil
// if none found.
func (m *CryptRule) ValidateAll() error {
	return m.validate(true)
}

func (m *CryptRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Destination

	// no validation rules for Algorithm

	// no validation rules for SecretKey

	// no validation rules for SecretKeyVersion

	// no validation rules for ReserveKey

	// no validation rules for ReserveKeyVersion

	if len(errors) > 0 {
		return CryptRuleMultiError(errors)
	}

	return nil
}

// CryptRuleMultiError is an error wrapping multiple validation errors returned
// by CryptRule.ValidateAll() if the designated constraints aren't met.
type CryptRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CryptRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CryptRuleMultiError) AllErrors() []error { return m }

// CryptRuleValidationError is the validation error returned by
// CryptRule.Validate if the designated constraints aren't met.
type CryptRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptRuleValidationError) ErrorName() string { return "CryptRuleValidationError" }

// Error satisfies the builtin error interface
func (e CryptRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCryptRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptRuleValidationError{}

// Validate checks the field values on Crypt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Crypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Crypt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CryptMultiError, or nil if none found.
func (m *Crypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Crypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SelfNamespace

	for idx, item := range m.GetEncryptRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CryptValidationError{
						field:  fmt.Sprintf("EncryptRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CryptValidationError{
						field:  fmt.Sprintf("EncryptRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CryptValidationError{
					field:  fmt.Sprintf("EncryptRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDecryptRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CryptValidationError{
						field:  fmt.Sprintf("DecryptRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CryptValidationError{
						field:  fmt.Sprintf("DecryptRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CryptValidationError{
					field:  fmt.Sprintf("DecryptRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CryptMultiError(errors)
	}

	return nil
}

// CryptMultiError is an error wrapping multiple validation errors returned by
// Crypt.ValidateAll() if the designated constraints aren't met.
type CryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CryptMultiError) AllErrors() []error { return m }

// CryptValidationError is the validation error returned by Crypt.Validate if
// the designated constraints aren't met.
type CryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptValidationError) ErrorName() string { return "CryptValidationError" }

// Error satisfies the builtin error interface
func (e CryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptValidationError{}
